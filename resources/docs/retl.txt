TODO:
- Table type
- Fix range pattern to use bounds checks and not construct ListDef expression
- Print collection types
- Extend range type to chars


TABLE-TYPE:
- columns: list[string] (names only)
- rows: list[tuple(...)]
- funcs w/ table-types:
    - createTable(data: list[tuple(...)], s: schema) -> table
    - writeCSV(path: string, table: table, s: schema, header)
    - readCSV(path: string, s: schema, header) -> table
    - join(table1, table2, func[any, any] -> bool) -> table: Inner join two tables
    - with(table, col: name, values: list[any]) -> table:
        Add column "name" with values, type is inferred, if used with existing column it replaces that one
    - where(table, col: name, func[] -> bool) -> table:
        ????
    - select(table, cols: list[string]) -> table: Select columns
    - drop(table, col: string) -> table: Remove column from table
    - column(table, name: string) -> list[any]: Returns column as list of values
    - collect(table) -> list[tuple(...)]: returns list of table rows
    - count(table) -> int: Row count

Example:
let tbl: table = createTable([("john", 55), ("bob", 42)], ${name: string, age: int});
let new_table = tbl |> with("retired", column(tbl, "age") |> map(|age: int| -> bool {age > 50}));
writeCSV("output.csv", new_table, ${name: string, age: int, retired: bool}, true)


Possible features?
- Tuple deconstruction
- lazy evaluation
- List slicing


FEATURES:
1. lambdas only 
2. basic arithmetic 
3. ints, strings, chars, bools, nulls, unions, lists, dicts, tuples, schemas 
- type-inference 
- type-aliasing 
- range operator .. 
- string indexing 
4. basic pattern matching 
- match by type: {name}: {type}
- multi-choice: |
- range: ..
- predicates
5. if/else 
6. builtin-functions for ETL, functions passed in are denoted code-blocks:
- read stdin 
- read csv 
- output csv
- output stdout 
- map 
- filter 
- zip 
- foldl
- foldr
- slice
- len 
- type
- intToString
- stringToInt
7. collection operators
- list append operator: ++ 
- list/dict access operator: () (application) 
- tuple access operator: . 
8. REPL 
- args:
     * retl <-d> => run the Retl REPL, optional debug mode
     * retl <-d> <-f> <file_name> => optional debug mode, run file
- steps:
    1. read strings, multi-line denoted by \
    2. scan, parse, type check with environment from REPL
    3. run new code
    4. add to env
10. strong, dynamic typing 
11. Iteration 
12. Comments 

Structure:
ReplRunner
Logger
Scanner
- File Position
Parser
Types (impl Type)
Values (impl Value)
Interpreter

Key characters:
: - denote type
-> - lambda return type
= - assignment, function block start
\ - extend newline
; - end statement
.. - range
+, -, *, /, % = arithmetic ops
>, <, >=, <=, ==, not, and, or - boolean operators
{ - start code block
} - end code block
[ - start list/dict, list/dict access
] - end list/dict, list/dict access
++ - list, dict, tuple concat
( - tuple start
) - tuple end
. - tuple access
, - list, tuple, dict element separator
| - multi-pattern, start of lambda signature, end of lambda signature
_ - catch-all case
=> - case expression
|> - bird operator, chain function calls


Keywords:
let
int
bool
char
string
null
list
dict
tuple
schema
true
false
and
or
if
else
match
case

Readln
read_csv
writeCSV
print
println
map
filter
zip
foldl
foldr
foreach
range