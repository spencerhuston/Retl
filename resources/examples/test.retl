alias user_entry_row_type = tuple(string, string, int, string, string, string);
alias user_entry_table_type = list[user_entry_row_type];
let user_entry_schema: schema = ${first: string, last: string, age: int, email: string, guid: string, income: string};

let root_path = "resources/examples/";
let tables: list[user_entry_table_type] =
    map(1..3, |table_num: int| -> user_entry_table_type {
        let table_num_str = intToString(table_num);
        println("Reading CSV #" + table_num_str + ": " + root_path + "test" + table_num_str + ".csv...");
        readCSV(root_path + "test" + table_num_str + ".csv", user_entry_schema)
    });

let empty_list: user_entry_table_type = [];
let combined_user_entry = foldl(empty_list, tables,
                                |combined_table: user_entry_table_type, tbl: user_entry_table_type| -> user_entry_table_type {
                                  combined_table ++ tbl
                                });
println("Combined table row count: " + intToString(len(combined_user_entry)));

alias output_row_type = tuple(string, string, string, string);
let filtered_user_table = combined_user_entry
    |> filter(|row: user_entry_row_type| -> bool {
        let income: string = row.5;
        let income_len = len(income);
        let trimmed_income = match income_len {
            case 8 => stringToInt(substr(income, 1, income_len - 3)),
            case 9 => stringToInt(income(1) + substr(income, 3, income_len - 3)),
            case _ => 0
        };
        match trimmed_income {
            case 2000..8000 => {
                true
            },
            case _ => false
        }
    })
    |> filter(|row: user_entry_row_type| -> bool {
        row.2 < 30
    })
    |> map(|row: user_entry_row_type| -> output_row_type {
        (row.0, row.1, row.3, row.4)
    })
    |> filter(|row: output_row_type| -> bool {
        let first_name = row.0;
        let first_initial = first_name(0);
        match first_initial {
            case 'A' | 'B' | 'C' | 'D' | 'L' => true,
            case _ => false
        }
    });

println("Filtered table row count: " + intToString(len(filtered_user_table)));

let path = "resources/examples/test_output.csv";
println("Writing filtered CSV: " + path + "...");
writeCSV(path, filtered_user_table, ${first: string, last: string, email: string, guid: string})